/** Declaration file generated by dts-gen */

export = koa_joi_router;

declare class koa_joi_router {
    constructor();

    acl(path: any, ...args: any[]): any;

    bind(path: any, ...args: any[]): any;

    checkout(path: any, ...args: any[]): any;

    connect(path: any, ...args: any[]): any;

    copy(path: any, ...args: any[]): any;

    delete(path: any, ...args: any[]): any;

    get(path: any, ...args: any[]): any;

    head(path: any, ...args: any[]): any;

    link(path: any, ...args: any[]): any;

    lock(path: any, ...args: any[]): any;

    "m-search"(path: any, ...args: any[]): any;

    merge(path: any, ...args: any[]): any;

    middleware(): any;

    mkactivity(path: any, ...args: any[]): any;

    mkcalendar(path: any, ...args: any[]): any;

    mkcol(path: any, ...args: any[]): any;

    move(path: any, ...args: any[]): any;

    notify(path: any, ...args: any[]): any;

    options(path: any, ...args: any[]): any;

    patch(path: any, ...args: any[]): any;

    post(path: any, ...args: any[]): any;

    prefix(...args: any[]): any;

    propfind(path: any, ...args: any[]): any;

    proppatch(path: any, ...args: any[]): any;

    purge(path: any, ...args: any[]): any;

    put(path: any, ...args: any[]): any;

    rebind(path: any, ...args: any[]): any;

    report(path: any, ...args: any[]): any;

    route(spec: any): any;

    search(path: any, ...args: any[]): any;

    subscribe(path: any, ...args: any[]): any;

    trace(path: any, ...args: any[]): any;

    unbind(path: any, ...args: any[]): any;

    unlink(path: any, ...args: any[]): any;

    unlock(path: any, ...args: any[]): any;

    unsubscribe(path: any, ...args: any[]): any;

    use(...args: any[]): any;

}

declare namespace koa_joi_router {
    namespace Joi {
        const isImmutable: boolean;

        const isJoi: boolean;

        const version: string;

        function allow(...args: any[]): void;

        function alt(...args: any[]): any;

        function alternatives(...args: any[]): any;

        function any(...args: any[]): any;

        function applyFunctionToChildren(...args: any[]): void;

        function array(...args: any[]): any;

        function assert(value: any, schema: any, message: any): void;

        function attempt(value: any, schema: any, message: any): any;

        function binary(...args: any[]): any;

        function bool(...args: any[]): any;

        function checkOptions(...args: any[]): void;

        function clone(...args: any[]): void;

        function compile(schema: any): any;

        function concat(...args: any[]): void;

        function createError(...args: any[]): void;

        function date(...args: any[]): any;

        function describe(...args: any[]): any;

        function description(...args: any[]): void;

        function disallow(...args: any[]): void;

        function empty(...args: any[]): void;

        function equal(...args: any[]): void;

        function error(...args: any[]): void;

        function example(...args: any[]): void;

        function exist(...args: any[]): void;

        function extend(...args: any[]): any;

        function forbidden(...args: any[]): void;

        function func(...args: any[]): any;

        function invalid(...args: any[]): void;

        function isRef(ref: any): any;

        function label(...args: any[]): void;

        function lazy(fn: any): any;

        function meta(...args: any[]): void;

        function not(...args: any[]): void;

        function notes(...args: any[]): void;

        function number(...args: any[]): any;

        function object(...args: any[]): any;

        function only(...args: any[]): void;

        function optional(...args: any[]): void;

        function options(...args: any[]): void;

        function raw(...args: any[]): void;

        function reach(schema: any, path: any): any;

        function ref(...args: any[]): any;

        function required(...args: any[]): void;

        function strict(...args: any[]): void;

        function string(...args: any[]): any;

        function strip(...args: any[]): void;

        function tags(...args: any[]): void;

        function unit(...args: any[]): void;

        function valid(...args: any[]): void;

        function validate(value: any, ...args: any[]): any;

        function when(...args: any[]): void;

        namespace alt {
            const prototype: {
            };

        }

        namespace alternatives {
            const prototype: {
            };

        }

        namespace any {
            const prototype: {
            };

        }

        namespace array {
            const prototype: {
            };

        }

        namespace assert {
            const prototype: {
            };

        }

        namespace attempt {
            const prototype: {
            };

        }

        namespace binary {
            const prototype: {
            };

        }

        namespace bool {
            const prototype: {
            };

        }

        namespace compile {
            const prototype: {
            };

        }

        namespace date {
            const prototype: {
            };

        }

        namespace describe {
            const prototype: {
            };

        }

        namespace extend {
            const prototype: {
            };

        }

        namespace extensionsSchema {
            const isImmutable: boolean;

            const isJoi: boolean;

            function allow(...args: any[]): void;

            function applyFunctionToChildren(...args: any[]): void;

            function checkOptions(...args: any[]): void;

            function clone(...args: any[]): void;

            function concat(...args: any[]): void;

            function createError(...args: any[]): void;

            function describe(...args: any[]): void;

            function description(...args: any[]): void;

            function disallow(...args: any[]): void;

            function empty(...args: any[]): void;

            function equal(...args: any[]): void;

            function error(...args: any[]): void;

            function example(...args: any[]): void;

            function exist(...args: any[]): void;

            function forbidden(...args: any[]): void;

            function invalid(...args: any[]): void;

            function items(...args: any[]): void;

            function label(...args: any[]): void;

            function length(...args: any[]): void;

            function max(...args: any[]): void;

            function meta(...args: any[]): void;

            function min(...args: any[]): void;

            function not(...args: any[]): void;

            function notes(...args: any[]): void;

            function only(...args: any[]): void;

            function optional(...args: any[]): void;

            function options(...args: any[]): void;

            function ordered(...args: any[]): void;

            function raw(...args: any[]): void;

            function required(...args: any[]): void;

            function single(...args: any[]): void;

            function sparse(...args: any[]): void;

            function strict(...args: any[]): void;

            function strip(...args: any[]): void;

            function tags(...args: any[]): void;

            function unique(...args: any[]): void;

            function unit(...args: any[]): void;

            function valid(...args: any[]): void;

            function validate(...args: any[]): void;

            function when(...args: any[]): void;

        }

        namespace func {
            const prototype: {
            };

        }

        namespace isRef {
            const prototype: {
            };

        }

        namespace lazy {
            const prototype: {
            };

        }

        namespace number {
            const prototype: {
            };

        }

        namespace object {
            const prototype: {
            };

        }

        namespace reach {
            const prototype: {
            };

        }

        namespace ref {
            const prototype: {
            };

        }

        namespace string {
            const prototype: {
            };

        }

        namespace validate {
            const prototype: {
            };

        }

    }

    namespace prototype {
        function acl(path: any, ...args: any[]): any;

        function bind(path: any, ...args: any[]): any;

        function checkout(path: any, ...args: any[]): any;

        function connect(path: any, ...args: any[]): any;

        function copy(path: any, ...args: any[]): any;

        function get(path: any, ...args: any[]): any;

        function head(path: any, ...args: any[]): any;

        function link(path: any, ...args: any[]): any;

        function lock(path: any, ...args: any[]): any;

        function merge(path: any, ...args: any[]): any;

        function middleware(): any;

        function mkactivity(path: any, ...args: any[]): any;

        function mkcalendar(path: any, ...args: any[]): any;

        function mkcol(path: any, ...args: any[]): any;

        function move(path: any, ...args: any[]): any;

        function notify(path: any, ...args: any[]): any;

        function options(path: any, ...args: any[]): any;

        function patch(path: any, ...args: any[]): any;

        function post(path: any, ...args: any[]): any;

        function prefix(...args: any[]): any;

        function propfind(path: any, ...args: any[]): any;

        function proppatch(path: any, ...args: any[]): any;

        function purge(path: any, ...args: any[]): any;

        function put(path: any, ...args: any[]): any;

        function rebind(path: any, ...args: any[]): any;

        function report(path: any, ...args: any[]): any;

        function route(spec: any): any;

        function search(path: any, ...args: any[]): any;

        function subscribe(path: any, ...args: any[]): any;

        function trace(path: any, ...args: any[]): any;

        function unbind(path: any, ...args: any[]): any;

        function unlink(path: any, ...args: any[]): any;

        function unlock(path: any, ...args: any[]): any;

        function unsubscribe(path: any, ...args: any[]): any;

        function use(...args: any[]): any;

        namespace acl {
            const prototype: {
            };

        }

        namespace bind {
            const prototype: {
            };

        }

        namespace checkout {
            const prototype: {
            };

        }

        namespace connect {
            const prototype: {
            };

        }

        namespace copy {
            const prototype: {
            };

        }

        namespace get {
            const prototype: {
            };

        }

        namespace head {
            const prototype: {
            };

        }

        namespace link {
            const prototype: {
            };

        }

        namespace lock {
            const prototype: {
            };

        }

        namespace merge {
            const prototype: {
            };

        }

        namespace middleware {
            const prototype: {
            };

        }

        namespace mkactivity {
            const prototype: {
            };

        }

        namespace mkcalendar {
            const prototype: {
            };

        }

        namespace mkcol {
            const prototype: {
            };

        }

        namespace move {
            const prototype: {
            };

        }

        namespace notify {
            const prototype: {
            };

        }

        namespace options {
            const prototype: {
            };

        }

        namespace patch {
            const prototype: {
            };

        }

        namespace post {
            const prototype: {
            };

        }

        namespace prefix {
            const prototype: {
            };

        }

        namespace propfind {
            const prototype: {
            };

        }

        namespace proppatch {
            const prototype: {
            };

        }

        namespace purge {
            const prototype: {
            };

        }

        namespace put {
            const prototype: {
            };

        }

        namespace rebind {
            const prototype: {
            };

        }

        namespace report {
            const prototype: {
            };

        }

        namespace route {
            const prototype: {
            };

        }

        namespace search {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace trace {
            const prototype: {
            };

        }

        namespace unbind {
            const prototype: {
            };

        }

        namespace unlink {
            const prototype: {
            };

        }

        namespace unlock {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

        namespace use {
            const prototype: {
            };

        }

    }

}

